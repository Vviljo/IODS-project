for (x in 1:i) {
y<-x[1:i]
}
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
for (x in 1:i) {
y<-x[1:i]
}
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
}
return(x)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
for (x in 1:i) {
y<-x[1:i]
}
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
for (x in 1:i) {
y<-x*x
}
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
y<-(x*sum(vector[1:i]))
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
old.y<-(x*(vector[1:i]))
new.y<-old.y*new.y
}
return(new.y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
oldy<-(x*(vector[1:i]))
newy<-oldy*newy
}
return(newy)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
oldy<-(x*(vector[1:i]))
newy<-oldy*newy
}
return(oldy)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
oldy<-(x*(vector[1:i])
newy<-oldy*newy
}
return(oldy)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
y<-(x*(vector[1:i])
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
y<-(x*(vector[1:i])
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
x<-1
for (i in 1:length(vector)){
y<-(x*(vector[1:i])
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
}
return(y)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[i]
}
return(x)
}
tulo(c(5,2,4,6))
tulo<-function(vector){
#  x<-vector[1]
for (i in 1:length(vector)){
x<-vector[1:i]
y<-(x*(vector[1:i])
}
return(y)
}
tulo(c(5,2,4,6))
#tehtävä8
A<-matrix(121:180, nrow=6)
A
#a)
sum(A[1:i,])
#a)
sum(A[1:i,1])
#a)
sum(A[1:i,2])
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:n) {
x<-sum(A[1:i,])
}
return(x)
}
x
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:n) {
x<-sum(A[1:n,])
}
return(x)
}
x
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:nrows(n)) {
x<-sum(A[1:n,])
}
return(x)
}
rivisummat(A)
#tehtävä8
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:nrow(n)) {
x<-sum(A[1:n,])
}
return(x)
}
rivisummat(A)
#tehtävä8
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:nrow(n)) {
x<-sum(A[i:n,])
}
return(x)
}
rivisummat(A)
sum(A[1,])
A
A<-matrix(121:180, nrow=6)
#a)
rivisummat<-function(n){
for (i in 1:n) {
x<-sum(A[1:nrow(n),])
}
return(x)
}
rivisummat(A)
rivizummat<-numeric(nrow(A))
for (i in nrow(A)) {
rivizummat[i]<-sum(A[i,])
}
rivizummat
rivizummat<-numeric(nrow(A))
for (i in nrow(A)) {
rivizummat[i]<-sum(A[i,])
}
rivizummat
rivizummat<-numeric(nrow(A))
for (i in nrow(A)) {
rivizummat[i]<-sum(A[i:nrow(A),])
}
rivizummat
rivizummat<-numeric(nrow(A))
for (i in nrow(A)) {
rivizummat[i]<-sum(A[,i])
}
rivizummat
rivizummat<-numeric(nrow(A))
for (i in nrow(A)) {
rivizummat[i]<-sum(A[i,])
}
rivizummat
A
rivizummat
rivizummat<-numeric(nrow(A))
for (i in 1:nrow(A)) {
rivizummat[i]<-sum(A[i,])
}
rivizummat
#Ja tämä meni kuten piti: rivisummat tulee erikseen
#b)
sapply(A,1 function(z) {return sum(A[i,])}
#Ja tämä meni kuten piti: rivisummat tulee erikseen
#b)
sapply(A,1 function(z) {return sum(A[i,])})
#Ja tämä meni kuten piti: rivisummat tulee erikseen
#b)
sapply(A,1, function(z) {return sum(A[i,])})
#Ja tämä meni kuten piti: rivisummat tulee erikseen
#b)
sapply(A, function(z) {return sum(A[z,])})
#Ja tämä meni kuten piti: rivisummat tulee erikseen
#b)
sapply(A, function(z) {return sum(A[i,])})
#c)
apply(A,1,sum)
#toimii!
#d)
rowSums(A)
#b)
sapply(A, function(i) {return sum(A[i,])})
#b)
sapply(A, function(i) {return sum(A[i,])})
#b)
sapply(A, function(i) {return A[i,]})
#b)
sapply(A, function(i) {return sum[i,]})
#b)
sapply(A, function(i) {return sum([i,])})
#b)
sapply(A, sum)
#b)
sapply(A, sum[1,])
#b)
sapply(A, sum[i,])
#b)
sapply(A, sum(A[i,])
#b)
sapply(A, sum(A[i,]))
#b)
sapply(A, sum(A[i,]))
#b)
sapply(A[1:6,], sum)
A
sigma_pituus<-7.2
sigma_antenni<-20
var_pituus=sigma_pituus^2
var_antenni=sigma_antenni^2
hajonta_plus_hajonta=sigma_antenni+sigma_pituus
#varianssien summa
yhteisvarianssi=var_antenni+var_pituus
#uusi varianssi
sqrt(yhteisvarianssi)
hajonta_plus_hajonta
rm(list=ls())
sigma_pituus<-7.2
sigma_antenni<-20
var_pituus=sigma_pituus^2
var_antenni=sigma_antenni^2
hajonta_plus_hajonta=sigma_antenni+sigma_pituus
#varianssien summa
yhteisvarianssi=var_antenni+var_pituus
#uusi hajonta
sqrt(yhteisvarianssi)
hajonta_plus_hajonta
rm(list=ls())
sigma_pituus<-7.2
sigma_antenni<-20
var_pituus=sigma_pituus^2
var_antenni=sigma_antenni^2
hajonta_plus_hajonta=sigma_antenni+sigma_pituus
#varianssien summa
yhteisvarianssi=var_antenni+var_pituus
#uusi hajonta
sqrt(yhteisvarianssi) #varianssien summasta neliöjuuri
hajonta_plus_hajonta #hajontojen summa
yhteisvarianssi
# This exercise explores the effects of omitted variables
# Replace all instances of "???" to run the code
# Install and attach packages ####
rm(list = ls())
pkgs <- c("tidyverse",
"mvtnorm")
for (i in seq_along(pkgs)){
if (!requireNamespace(pkgs[i], quietly = TRUE)){
install.packages(pkgs[i])
}
}
library(tidyverse)
library(broom)
library(mvtnorm)
# This exercise explores the effects of omitted variables
# Replace all instances of "???" to run the code
# Install and attach packages ####
rm(list = ls())
pkgs <- c("tidyverse",
"mvtnorm")
for (i in seq_along(pkgs)){
if (!requireNamespace(pkgs[i], quietly = TRUE)){
install.packages(pkgs[i])
}
}
library(tidyverse)
library(broom)
library(mvtnorm)
# __Set random seed such that the results are reproducible ####
set.seed(1985)
# Use the multivariate normal distribution to generate regressors
# Have a look at ?rmvnorm
regressors_pos <- rmvnorm(200, sigma = matrix(c(1, 0.7, 0.7, 1), nrow = 2)) %>% as_tibble()
?rmvnorm
plot(regressors_pos)
# the true underlying population parameters are \beta = (\beta_1, \beta_2)' = (3,2) and \sigma^2 = 1.5^2
data_pos <- regressors_pos %>%
mutate(errors = rnorm(200, mean = 0, sd = 1.5)) %>%
mutate(y = V1*3 + V2*2 + errors)
# ____Big model ####
# Estimate the model with the full set of regressors
lmp_big <- lm(y ~ V1 + V2 - 1, data = data_pos)
lmp_big %>% glance()
lmp_big %>% tidy()
# Estimate the models when the second variable is omitted
lmp_small <- lm(y ~ V1 - 1, data = data_pos)
lmp_small %>% glance()
lmp_small %>% tidy()
# __Set random seed such that the results are reproducible ####
set.seed(1985)
# Use the multivariate normal distribution to generate 2 variables with 200 observations, generated from a multivariate normal distribution with unit variance an correlation -0.7
# Have a look at ?rmvnorm
regressors_neg <- rmvnorm(200, sigma = matrix(c(1, -0.7, -0.7, 1), nrow = ???)) %>% as_tibble()
# Use the multivariate normal distribution to generate 2 variables with 200 observations, generated from a multivariate normal distribution with unit variance an correlation -0.7
# Have a look at ?rmvnorm
regressors_neg <- rmvnorm(200, sigma = matrix(c(1, -0.7, -0.7, 1), nrow = 2)) %>% as_tibble()
# Use the multivariate normal distribution to generate 2 variables with 200 observations, generated from a multivariate normal distribution with unit variance an correlation -0.7
# Have a look at ?rmvnorm
regressors_neg <- rmvnorm(200, sigma = matrix(c(1, -0.7, -0.7, 1), nrow = 2)) %>% as_tibble()
# Simulate the (in reality unobserved) errors and the left-hand-side variable y
# the true underlying population parameters are \beta = (\beta_1, \beta_2)' = (3,2) and \sigma^2 = 1.5^2
data_neg <- regressors_neg %>%
mutate(errors = rnorm(200, mean = 0, sd = 1.5)) %>%
mutate(y = V1*3 + V2*2 + errors)
# ____Big model ####
lmn_big <- lm(y ~ V1 + V2 - 1, data = data_neg)
lmn_big %>% glance()
lmn_big %>% tidy()
# ____Small model ####
lmn_small <- lm(y ~ V1 - 1, data = data_neg)
lmn_small %>% glance()
lmn_small %>% tidy()
setwd("~/Documents/GitHub/IODS-project")
rm(list=ls())
RATSL<-read.table("RATSL.txt")
head(RATS)
rm(list=ls())
library(dplyr)
library(stringr)
library(ggplot2)
library(GGally)
library(tidyr)
RATSL<-read.table("RATSL.txt")
rm(list=ls())
library(dplyr)
library(stringr)
library(ggplot2)
library(GGally)
library(tidyr)
RATSL<-read.table("RATSL.txt")
rm(list=ls())
library(dplyr)
library(stringr)
library(ggplot2)
library(GGally)
library(tidyr)
RATSL<-read.table("RATSL.txt")
setwd("~/Documents/GitHub/IODS-project/data")
RATSL<-read.table("RATSL.txt")
head(RATS)
head(RATSL)
RATSL<-read.table("RATSL.txt")
RATSL<-read.table("RATSL")
RATSL<-read.table(RATSL.txt)
RATSL<-read.table(RATSL)
RATSL<-read.table("RATSL.txt")
RATSL <- read.table("RATSL.txt")
RATSL <- read.table("BPRSL.txt")
RATSL <- read.table("human.txt")
RATSL <- read.table("ratsl.txt")
write.table(RATSL, file = "ratsl.txt")
write.table(BPRSL, file = "bprsl.txt")
#Ville Pikkarainen 22.11.2018
#IODS-project, data wrangling exercise as part of Chapter 6
#info regarding data here: https://mooc.helsinki.fi/pluginfile.php/29659/course/section/2208/MABS4IODS-Part6.pdf
#dataset BPRS: https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt
#dataset RATS: https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt
#start with some house keeping
rm(list=ls())
library(dplyr)
library(stringr)
library(ggplot2)
library(GGally)
library(tidyr)
### PART 1: Importing data and looking at the datasets
#importing data
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
RATS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt", stringsAsFactors = F, na.strings = "..")
#Structure and dimensions of the data for BPRS
str(BPRS)
dim(BPRS)
head(BPRS)
summary(BPRS) #summary of variables in BPRS
#BPRS is a wide format dataset. Here, each participant has its own row and each response is in the separate column (for different weeks)
#also, the first column shows if the participant is in the treatment or the control group
#and the second column shows the "number" of the subject such that all subjects have their own number.
#As indicated by str() and later explained in more detail, there are 40 obs. of  11 variables
#so the number of participants is 40 and there are 11 variables for them (treatment, subject number, observations for weeks 0 - 11)
#Backfround info about this particular dataset:
#In BPRS, "40 male subjects were randomly assigned to one of two treatment groups and each subject was rated
#on the brief psychiatric rating scale (BPRS) measured before treatment began
#(week 0) and then at weekly intervals for eight weeks. The BPRS assesses
#the level of 18 symptom constructs such as hostility, suspiciousness, hallucinations
#and grandiosity; each of these is rated from one (not present) to seven
#(extremely severe). The scale is used to evaluate patients suspected of having
#schizophrenia." (https://mooc.helsinki.fi/pluginfile.php/29659/course/section/2208/MABS4IODS-Part6.pdf)
#Structure and dimensions of the data for RATS
str(RATS)
dim(RATS)
head(RATS)
summary(RATS) #summary of variables in RATS
#Similarly to BPRS, also RATS dataset is in wide form such that there are 16 participants who are assigned an ID (the first column),
#a group (1, 2 or 3) and the rest of the variables are for observations at different points of time.
### PART 2: Converting the categorical variables of both data sets to factors
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Factor variables ID and Group
RATS$ID<-factor(RATS$ID)
RATS$Group<-factor(RATS$Group)
### PART 3: Converting the data sets to long form and adding a week variable to BPRS and a Time variable to RATS
# Convert to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(weeks,5,5)))
# Take a glimpse at the BPRSL data
glimpse(BPRSL)
# Convert data to long form
RATSL <- RATS %>%
gather(key = WD, value = Weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(WD,3,4)))
# Glimpse the data
glimpse(RATSL)
write.table(RATSL, file = "ratsl.txt")
write.table(BPRSL, file = "bprsl.txt")
RATSL <- read.table("ratsl.txt")
read.table("ratsl.txt")
rm(list=ls())
library(dplyr)
library(stringr)
library(ggplot2)
library(GGally)
library(tidyr)
read.table("ratsl.txt")
RATSL<-read.table("ratsl.txt")
head(RATSL)
